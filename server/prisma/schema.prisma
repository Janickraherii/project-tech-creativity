// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modèle pour les utilisateurs
model User {
  id                   Int                  @id @default(autoincrement())
  username             String               @unique
  email                String               @unique
  passwordHash         String // (remplacez par un hash sécurisé)
  profileImage         String // Chemin de l'image de profil
  coverImage           String // Chemin de l'image de couverture
  posts                Post[] // Les publications de l'utilisateur
  likes                Like[] // Les likes de l'utilisateur
  publicationHistories PublicationHistory[] // Ajout du champ de relation opposé
}

// Modèle pour les publications
model Post {
  id                   Int                  @id @default(autoincrement())
  user                 User                 @relation(fields: [userId], references: [id])
  userId               Int
  imageUrl             String // Chemin de l'image publiée
  caption              String? // Légende de la publication
  createdAt            DateTime             @default(now())
  likes                Like[] // Les likes de la publication
  publicationHistories PublicationHistory[] // Ajout du champ de relation opposé
}

// Modèle pour les likes
model Like {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  post   Post @relation(fields: [postId], references: [id])
  postId Int
}

model PublicationHistory {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())
}
